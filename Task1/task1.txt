1.Анализ, идентификация проблем
Существующие
 - Задержка с выполнением заказов, проблемы не на стороне производства
   Вывод - проблемы возникают на стороне CRM и MES
   Возможны причины проблем:
   1.Долгая коммуникация с заказчиками в рамах подготовки макета (то, что отправляется на производство)
     Причины:
     - Большой объем заказов приводит к долгой работе операторов и продацов.
       - Возможно не хватает продавцов и операторов
         - При увеличении количества заказов и пользователей CRM/MES/API
           Падает скорость работы 
           Возникают ошибки в работе (отказ в обсуживании, заказ не сохраняется, сохраняется с ошибкой и т.п.)
           Происоходит остановка работы (аварийная ситуация при которой происходит длительный простой CRM)
           Увеличивается время техноогических окон 
           
Потенциальные
 - Кажется, что все что могло, уже произошло, дальше только отказ БД сервисов с потерей данных

2. Разработайте инициативы, которые необходимы для устранения нежелательных ситуаций. 
   Запишите их в список.
   1.Создать новый Серис Orders
      1.1 Сервис хранит в БД Orders и работает с заказами из разных источников
      1.2 В сервисе инкапсулирована работа с заказами
      1.3 БД Orders шардирована
      1.4 Cервис владеет БД 3D file Storage и предоставляет достук к ней через синхронное/асинхронный API
      1.5 Сервси пукбликует в топик Kafka события по заказу с данными (создание/обновление)
      1.6 Сервис публикует в топик Kafka заявки на расчет стоимости заказа
      1.7 Сервис читает из топика Kafka сообщения о рассчитанной стоимости заказа
      1.8 Сервис имеет API для регулирования частоты публикации сообщений в Kafka
      1.9 У сервсиса есть кэш Redis для хранения информации о заказах
      1.10 Добавить метрики и логирование, публикуется в Kafka
   2.Создать новый сервис PricеCalculation
      2.1 Сервис работает без БД
      2.2 Из топика Kafka читает сообщение о расчете со всеми данными
      2.3 После расчёта публикует сообщение в Kafka со стоимостью расчета
      2.4 Добавить метрики и логирование, публикуется в Kafka
   3.InternetShop (Замечаний по работе интернет-магазина нет)
     3.1 Добавить S3 БД для промежуточного хранение загружаемых 3D моделей.
     3.2 Сделать загрузку 3D моделей в основную 3D file Storage асинхронной
         Заявки на заказы передаются асинхронно в сервис Orders (REST команда + Kafka данные)
         Сервис имеет API для регулирования частоты публикации сообщений в Kafka
     3.3 Сделать сервис ответственным только за работу InternetShop 
         Сервис хранит интернет-заявки на заказы Orders
     3.4 Сервис читает из топики Kafka обновление статусов по заказам
     3.5 У сервиса есть кэш Redis для хранения информации о заказах и запросах
     3.6 Добавить метрики и логирование, публикуется в Kafka
   4.CRM
     4.1 Добавить S3 БД для промежуточного хранение загружаемых 3D моделей.
     4.2 Сделать загрузку 3D моделей в основную 3D file Storage асинхронной
         Заявки на заказы передаются асинхронно в сервис Orders (REST команда + Kafka данные)
         Сервис имеет API для регулирования частоты публикации сообщений в Kafka 
     4.3 Cоздать отдельнуж БД для CRM (хранение CRM данных, бизнес-процессы CRM) 
         Сервис хранит заявки на заказы Orders
     4.4 Сервис читает из топики Kafka обновление статусов по заказам
     4.5 У сервсиса есть кэш Redis для хранения информации о заказах и запросах
     4.6 Добавить метрики и логирование, публикуется в Kafka
   5.MES API
     5.1 Добавить S3 БД для промежуточного хранение загружаемых 3D моделей.
     5.2 Сделать загрузку 3D моделей в основную 3D file Storage асинхронной через API сервиса Orders
         Заявки на заказы передаются асинхронно в сервис Orders (REST команда + Kafka данные)
         Сервис имеет API для регулирования частоты публикации сообщений в Kafka 
     5.3 Cоздать отдельную БД для работы с заявками и клиентами API (Outbox паттерн)
     5.4 Сделать кеш Redis с заявками и заказами
     5.5 Сервис читает из топики Kafka обновление статусов по заказам 
     5.6 Функция расчета price перенести в сервис Orders
     5.7 Добавить метрики и логирование, публикуется в Kafka
   6.MES (Сервис позволяет операторам рабирать заказы
     6.1 БД для работы операторов с заказами/заявками
     6.2 Сделать кеш Redis с заказами/заявками
     6.3 Через топики Kafka читает события о заказах из Order и размещаем в Redis 
     6.4 Добавить метрики и логирование, публикуется в Kafka
   7.Добавить Сервис хранения и предоставления метрик и логов
     7.1 БД Elasticsearch 
     7.2 Из топики Kafka читаются и пишутся в БД метрики и логи
     7.3 Есть API доступа к метрикам и логам
   8.Добавить сервис Отчетность
     8.1 По CDC со всех БД (не S3) забираем и через Kafka передаем данные
     8.2 Данные читаются из Kafka и пишутся в YDB
     8.3 Сервис имеет API для предоставления данных по запросам

Расставьте инициативы в порядке приоритета. 
 1:5.4,5.1,5.2
 2:6.2,6.1
 3:2,1,7,4,3,8
Опишите ход своих рассуждений и ответьте на вопросы:
 Сначала решаем проблемы там, где возникли и по принципу 20/80
 1. Обеспечиваем быстрое доступ операторов MES к заказам (Кэширование в Redis) 
 2. Обеспечиваем быстрое внесение заявок по MES API (Внесение в In-Box заявки, асинхронное создание заказов)
    Асинхронно отвязываем сервисы MES и MES API
 4. Переносим расчет в отдельный сервис
Какой вы видите целевую архитектуру через полгода?
 - Кэширование
 - Асинхронная развязка сервисов
 - Выделение сервиса расчета
 - Выделения сервиса заказов с шардированием и R/W разделением БД
 - Метрики
Если бы у вас была возможность выполнить только три пункта из списка инициатив в ближайшие полгода
что бы вы выбрали и почему? Не обязательно добавлять в список только эпики. 
- Подключение Кэш к MES (список заказов для быстрой работы операторов)
- Разделение БД у MES и MES API (отсутствие влияния на пользователей каждого сервиса)
  В MES API разделение заявок (быстрая обработка) и заказов с их асинхронной обработкой 
- Подключение к MES API 3S DB
- Сделать работу с 3D file Storage асинхронной
- В MES API перенести функцию расчета в отдельный сервис с асинхронной работой
